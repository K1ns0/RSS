<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://K1ns0.github.io/RSS/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-09-09T00:44:56.360Z</updated>
    <generator>osmosfeed 1.11.0</generator>
    <link rel="alternate" href="https://K1ns0.github.io/RSS/index.html"/>
    <link rel="self" href="https://K1ns0.github.io/RSS/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[JavaScript逆向调试记 —— defcon threefactooorx writeup]]></title>
        <id>https://www.leavesongs.com/PENETRATION/defcon-29-threefactooorx-writeup.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/defcon-29-threefactooorx-writeup.html"/>
        <updated>2021-09-08T07:11:29.253Z</updated>
        <summary type="html"><![CDATA[defcon 29就这一道Web题目，说实话也没学到啥东西，唯一学到的就是勿钻牛角尖，及时调整策略。此题严格]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[手工编写简化版CommonsCollections6，带你实现Java8全版本反序列化利用]]></title>
        <id>https://www.leavesongs.com/PENETRATION/diy-commons-collections6-poc.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/diy-commons-collections6-poc.html"/>
        <updated>2021-09-08T07:11:27.106Z</updated>
        <summary type="html"><![CDATA[这是代码审计知识星球中《Java安全漫谈》的第十二篇文章。]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[宝塔面板phpMyAdmin未授权访问漏洞是个低级错误吗？]]></title>
        <id>https://www.leavesongs.com/PHP/baota-phpmyadmin-unauthentication-analysis.html</id>
        <link href="https://www.leavesongs.com/PHP/baota-phpmyadmin-unauthentication-analysis.html"/>
        <updated>2021-09-08T07:11:10.944Z</updated>
        <summary type="html"><![CDATA[本文2020年8月24日发表于代码审计公众号
周日晚，某群里突然发布了一则消息，宝塔面板的phpmyadmin存在未授权访问漏洞的紧急漏洞预警，并给出了一大批存在漏洞的URL：

随便点开其中一个，赫然就是一个大大的phpmyadmin后台管理页面，无需任何认证与登录。当然，随后各种神图神事也都刷爆了社交网络，作为一个冷静安全研究者，我对此当然是一笑置之，但是这个漏洞的原因我还是颇感兴趣的，所]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django中与时区相关的安全问题]]></title>
        <id>https://www.leavesongs.com/PYTHON/django-timezone-detail.html</id>
        <link href="https://www.leavesongs.com/PYTHON/django-timezone-detail.html"/>
        <updated>2021-09-08T07:11:10.877Z</updated>
        <summary type="html"><![CDATA[在开发国际化网站的时候，难免会与时区打交道，通用CMS更是如此，毕竟其潜在用户可能是来自于全球各地的。Django在时区这个问题上下了不少功夫，但是很多资深的开发者都有可能尚未完全屡清楚Django中各种时间的实际意义和使用方法，导致写出错误的代码；作为安全研究人员，时区问题也可能和一些安全问题挂钩，比如优惠券的过期时间、订单的下单与取消时间等，如果没有考虑时区问题，有可能将导致一些逻辑漏洞。
本]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BCEL ClassLoader去哪了]]></title>
        <id>https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html"/>
        <updated>2021-09-08T07:11:10.662Z</updated>
        <summary type="html"><![CDATA[com.sun.org.apache.bcel.internal.util.ClassLoader是常常在构造漏洞利用POC时用到的类。但是，我前几天在写《Java安全漫谈》的时候，偶然发现我环境中的com.sun.org.apache.bcel.internal.util.ClassLoader类找不到了，本文就带大家来找找BCEL ClassLoader。
0x01 BCEL从哪里来
首先，B]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CVE-2021-21287: 容器与云的碰撞——一次对MinIO的测试]]></title>
        <id>https://www.leavesongs.com/PENETRATION/the-collision-of-containers-and-the-cloud-pentesting-a-MinIO.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/the-collision-of-containers-and-the-cloud-pentesting-a-MinIO.html"/>
        <updated>2021-09-08T07:11:10.646Z</updated>
        <summary type="html"><![CDATA[事先声明：本次测试过程完全处于本地或授权环境，仅供学习与参考，不存在未授权测试过程。本文提到的漏洞《MinIO未授权SSRF漏洞（CVE-2021-21287）》已经修复，也请读者勿使用该漏洞进行未授权测试，否则作者不承担任何责任
(English edition)
随着工作和生活中的一些环境逐渐往云端迁移，对象存储的需求也逐渐多了起来，MinIO就是一款支持部署在私有云的开源对象存储系统。M]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[一次对 Tui Editor XSS 的挖掘与分析]]></title>
        <id>https://www.leavesongs.com/PENETRATION/a-tour-of-tui-editor-xss.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/a-tour-of-tui-editor-xss.html"/>
        <updated>2021-09-08T07:11:10.437Z</updated>
        <summary type="html"><![CDATA[TOAST Tui Editor是一款富文本Markdown编辑器，用于给HTML表单提供Markdown和富文本编写支持。最近我们在工作中需要使用到它，相比于其他一些Markdown编辑器，它更新迭代较快，功能也比较强大。另外，它不但提供编辑器功能，也提供了渲染功能（Viewer），也就是说编辑和显示都可以使用Tui Editor搞定。
Tui Editor的Viewer功能使用方法很简单：
i]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[有安全研究者混入了PHP 8.0开发组！]]></title>
        <id>https://www.leavesongs.com/PHP/php-8-0-release.html</id>
        <link href="https://www.leavesongs.com/PHP/php-8-0-release.html"/>
        <updated>2021-09-08T07:11:10.408Z</updated>
        <summary type="html"><![CDATA[本文首发在我的『代码审计』公众号，欢迎关注
经历了近半年的alpha版本测试后，PHP在2020年11月26号正式发布了8.0版本：https://www.php.net/releases/8.0/en.php
今天我们就来浏览一下PHP 8.0中出现的主要特性，以及它给我们安全研究人员带来的挑战。
命名参数 Named Arguments
PHP 8 以前，如果我们需要给一个函数的第N个参数]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CVE-2021-39165: 从一个Laravel SQL注入漏洞开始的Bug Bounty之旅]]></title>
        <id>https://www.leavesongs.com/PENETRATION/cachet-from-laravel-sqli-to-bug-bounty.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/cachet-from-laravel-sqli-to-bug-bounty.html"/>
        <updated>2021-09-08T07:11:10.280Z</updated>
        <summary type="html"><![CDATA[事先声明：本次测试过程完全处于本地或授权环境，仅供学习与参考，不存在未授权测试过程。本文提到的漏洞《Cachet SQL注入漏洞（CVE-2021-39165）》已经修复，也请读者勿使用该漏洞进行未授权测试，否则作者不承担任何责任
0x01 故事的起源
一个百无聊赖的周日晚上，我在知识星球闲逛，发现有一个匿名用户一连向我提出了两个问题：

本来不是很想回答这两个问题，一是感觉比较基础，二是现在]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CommonsBeanutils与无commons-collections的Shiro反序列化利用]]></title>
        <id>https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html</id>
        <link href="https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html"/>
        <updated>2021-09-08T07:11:10.208Z</updated>
        <summary type="html"><![CDATA[这是代码审计知识星球中Java安全漫谈的第十七篇文章。完整文章列表与相关代码请参考：https://github.com/phith0n/JavaThings
上一篇文章里，我们认识了java.util.PriorityQueue，它在Java中是一个优先队列，队列中每一个元素有自己的优先级。在反序列化这个对象时，为了保证队列顺序，会进行重排序的操作，而排序就涉及到大小比较，进而执行java.]]></summary>
        <author>
            <name>phithon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[译] Linux 异步 I/O 框架 io_uring：基本原理、程序示例与性能压测（2020）]]></title>
        <id>https://arthurchiao.github.io/blog/intro-to-io-uring-zh/</id>
        <link href="https://arthurchiao.github.io/blog/intro-to-io-uring-zh/"/>
        <updated>2021-09-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[译者序
本文组合翻译了以下两篇文章的干货部分，作为 io_uring 相关的入门参考：
How io_uring and eBPF Will Revolutionize Programming in Linux, ScyllaDB, 2020
An Introduction to the io_uring Asynchronous I/O Framework, Oracle, 2020
io_uring 是 2019 年 Linux 5.1 内核首次引入的高性能
异步 I/O 框架，能显著加速 I/O 密集型应用的性能。
但如果你的应用已经在使用 传统 Linux AIO 了，并且使用方式恰当，
那 io_uring 并不会带来太大的性能提升 —— 根据原文测试（以及我们
自己的复现），即便打开高级特性，也只有 5%。除非你真的需要这 5% 的额外性能，否则
切换成 io_uring 代价可能也挺大，因为要
重写应用来适配 io_uring（或者让依赖的平台或框架去适配，总之需要改代码）。
既然性能跟传统 AIO 差不多，那为什么还称 io_uring 为革命性技术呢？
它首先和最大的贡献在于：统一了 Linux 异步 I/O 框架，
Linux AIO 只支持 direct I/O 模式的存储文件
（storage file），而且主要用在数据库这一细分领域；
io_uring 支持存储文件和网络文件（network sockets），也支持更多的异步系统调用
（accept/openat/stat/...），而非仅限于 read/write 系统调用。
在设计上是真正的异步 I/O，作为对比，Linux AIO 虽然也
是异步的，但仍然可能会阻塞，某些情况下的行为也无法预测；
灵活性和可扩展性非常好，甚至能基于 io_uring 重新所有系统调用，而 Linux AIO…]]></summary>
        <author>
            <name>ArthurChiao's Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[译] Linux Socket Filtering (LSF, aka BPF)（KernelDoc，2021）]]></title>
        <id>https://arthurchiao.github.io/blog/linux-socket-filtering-aka-bpf-zh/</id>
        <link href="https://arthurchiao.github.io/blog/linux-socket-filtering-aka-bpf-zh/"/>
        <updated>2021-08-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[译者序
本文翻译自 2021 年 Linux 5.10 内核文档：
Linux Socket Filtering aka Berkeley Packet Filter (BPF)，
文档源码见 Documentation/networking/filter.rst。
Linux Socket Filtering (LSF) 是最初将 BSD 系统上的数据包过滤技术
BPF（伯克利包过滤器）移植到 Linux 系统时使用的名称，但后来大家还是更多称呼其为
BPF（aka：as known as）。本文介绍了 Linux BPF 的一些
底层设计和实现（包括 cBPF 和 eBPF），可作为
Cilium：BPF 和 XDP 参考指南（2021）
的很好补充，这两篇可能是目前除了内核源码之外，学习 BPF 的最全/最好参考。
本文适合有一定 BPF 经验的开发者阅读，不适合初学者。
由于内核文档更新不是非常及时，文中部分内容已经与 5.10 代码对不上，因此（少量）
过时内容在翻译时略去了。另外，为文中的大部分 BPF 汇编 / x86_64 汇编加了注释，
并插入了一些 5.10 代码片段或链接，方便更深入理解。
由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。
以下是译文。
译者序
————————————————————————
cBPF 相关内容
————————————————————————
1 cBPF 引言    
1.1 LSF (cBPF) 与 BSD BPF
1.2 ATTACH/DETACH/LOCK 给定过滤器
1.3 LSF/BPF 使用场景
1.4 cBPF 经典论文
2 cBPF 数据结构    
2.1 struct sock_filter
2.2 struct sock_fprog
3 cBPF 示例：libpcap 过滤…]]></summary>
        <author>
            <name>ArthurChiao's Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[译] LLVM eBPF 汇编编程（2020）]]></title>
        <id>https://arthurchiao.github.io/blog/ebpf-assembly-with-llvm-zh/</id>
        <link href="https://arthurchiao.github.io/blog/ebpf-assembly-with-llvm-zh/"/>
        <updated>2021-08-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[译者序
本文翻译自 2020 年 Quentin Monnet 的一篇英文博客：
eBPF assembly with LLVM。
Quentin Monnet 是 Cilium 开发者之一，此前也在从事网络、eBPF 相关的开发。
翻译已获得 Quentin Monnet 授权。
文章介绍了如何直接基于 LLVM eBPF 汇编开发 BPF 程序，虽然给出的
两个例子极其简单，但其流程对于开发更大的程序也是适用的。为什么不用 C，而用汇编
这么不友好的编程方式呢？至少有两个特殊场景：
测试特定的 eBPF 指令流
对程序的某个特定部分进行深度调优
原文历时（开头之后拖延）了好几年，因此文中存在一些（文件名等）前后不一致之处，翻译时已经改正
（交流之后，作者已经修正）；另外，译文基于 clang/llvm 10.0 验证了其中的每个步骤，因此代码、输出等与原文不完全一致。
由于译者水平有限，本文不免存在遗漏或错误之处。如有疑问，请查阅原文。
以下是译文。
译者序
1 引言    
1.1 主流开发方式：从 C 代码直接生成 eBPF 字节码
1.2 特殊场景需求：eBPF 汇编编程更合适
1.3 几种 eBPF 汇编编程方式
2 Clang/LLVM 编译 eBPF 基础    
2.1 将 C 程序编译成 BPF 目标文件
1.2 查看 ELF 文件中的 eBPF 字节码
3 方式一：C 生成 eBPF 汇编 + 手工修改汇编    
3.1 将 C 编译成 eBPF 汇编（clang）
3.2 手工修改汇编程序
3.3 将汇编程序 assemble 成 ELF 对象文件（llvm-mc）
3.4 查看对象文件中的 eBPF 字节码（readelf）
3.5 以更加人类可读的方式查看 eBPF 字节码（llvm-objdump -d）
3.6 编译时嵌入调试符号或 C 源…]]></summary>
        <author>
            <name>ArthurChiao's Blog</name>
        </author>
    </entry>
</feed>